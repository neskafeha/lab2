package ru.ystu.lab2.service;import ru.ystu.lab2.dao.QueueDao;import ru.ystu.lab2.entity.Answer;import java.util.List;import java.util.Scanner;import static java.lang.System.*;public class QueueServiceImpl implements QueueService {    private final QueueDao queueDao;    private int queueId = 0;    private int countTrueAnswer = 0;    public QueueServiceImpl(QueueDao queueDaoCsv) {        this.queueDao = queueDaoCsv;    }    @Override    public void run() {        if (queueDao.initData()) {            goNextQueue();        }    }    private void goNextQueue() {        if (queueDao.getQueueCount() > queueId) {            printQuestion();            readAnswer();        } else {            out.println("Отвеченных вопросов: " + countTrueAnswer + " из " + queueDao.getQueueCount() +                    "\nВопросы закончились... " + "Викторина " + "завершена" + ".");        }    }    private void readAnswer() {        Scanner scanner = new Scanner(in);        int answerId = scanner.nextInt();        if (queueDao.isTrueAnswer(queueId, answerId)) {            handleSuccessAnswer();        } else {            handleErrorAnswer();        }    }    private void printQuestion() {        String nameQuestion = queueDao.getNameQueue(queueId);        out.println("Вопрос " + (queueId + 1) + " : " + nameQuestion);        printVariantsAnswer();    }    private void printVariantsAnswer() {        List<Answer> answerList = queueDao.getAnswers(queueId);        for (int id = 0; id < answerList.size(); id++) {            out.println(id + 1 + ". " + answerList.get(id).getName());        }    }    private void handleSuccessAnswer() {        countTrueAnswer++;        if (queueDao.getQueueCount() - 1 > queueId) {            out.println("Правильный ответ! Следующий вопрос:\n");            queueId++;            goNextQueue();        } else {            out.println("Правильный ответ!\nОтвеченных вопросов: " + countTrueAnswer + " из " + queueDao.getQueueCount() + "\nВикторина завершена, " +                    "ответить на вопросы еще раз?\n1.Да\n2.Нет,закончить");            Scanner scanner = new Scanner(in);            int variantId = scanner.nextInt();            if (variantId == 1) {                queueId = 0;                countTrueAnswer = 0;                goNextQueue();            } else {                exit(0);            }        }    }    private void handleErrorAnswer() {        out.println("Неправильный ответ!\n1.Повторить вопрос\n2.Следующий вопрос\n3.Начать сначала");        Scanner scanner = new Scanner(in);        int variantId = scanner.nextInt();        if (variantId == 1) {            goNextQueue();        } else if (variantId == 2) {            queueId++;            goNextQueue();        } else if (variantId == 3) {            queueId = 0;            countTrueAnswer = 0;            goNextQueue();        } else {            handleErrorAnswer();        }    }}